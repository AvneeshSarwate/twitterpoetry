	The thematic motivation for this piece came from another project. I have been collaborating with a friend on the art/tech for a musical production of paradise lost, and I wanted to create a textual piece that could accompany the production. In general, I had two main conceptual goals - I wanted something more literary, where reading more standardly structured phrases and sentences is still central to the work. I also wanted something where the contents of the tweets were minimally transformed, and their message played a significant part in the work. 
	I initially wanted to transform the “everyday” tweets returned for a search topic to be transformed to be more biblical, and I played around with various ideas using RiTa, like doing string/phrase replacement (e.g. replacing dad/father with “GOD”), but these approaches were too brittle and predictable to produce interesting results - I wanted to create something that wasn’t awkwardly spliced, but I didn’t want to implement the battery of manual transformations that would be necessary to make something halfway decent. 
	I thought adding text other than the tweets could help somehow, and I thought about ways to integrate the Bible or the text of Paradise Lost into the work. I realized  I needed to find some computational correspondence between tweets and other text, and that led me to to notion of a “distance function” defined on sentences. Luckily I was able to find an implementation of such a function in Python using WordNet. The natural move was to match tweets to their most similar verse in the Bible. This still didn't completely close the semantic gap, but I decided to leave the act of creating linked meaning to the reader, helping it along by text-setting the tweet-verse pairs in intertwined arrangements. 
	While looking for ways to do generate interesting static layouts, I found several ways to do dynamic text setting. The Initial idea was to have the tweet-verse pairs move around each other with some fixed animation, but then I found the example of laying out text on drawn paths and loved it. I was captivated by the idea of "(inter)active" reading animation - you have to work to reveal the lines of the poem. 
	Currently, the interaction works as follows - the 15 tweets returned from searching “a crisis of faith” are arbitrarily matched to different books of the Bible (specifically ____). The most similar verse per tweet/book pair is returned. Drawing on the canvas draws a particular tweet-verse pair, and subsequent draw strokes will draw the next tweet-verse pairs, cycling through the list. 
	The choice to arbitrarily associate Bible books to tweets was to circumvent technical restrictions. Searching for the closest verse in the entire Bible takes about five minutes per tweet, so teaching a single book instead is much faster (the Bible books chosen were the most “important” books with < 700 verses). Also, verses with lots of pronouns will have a high match for similarity with many tweets, so associating different tweets with different books prevents the same verse from being matched with lots of different tweets. 
